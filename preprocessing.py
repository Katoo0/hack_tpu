import pandas as pd
import pickle
import datetime

class Preprocessor:
  def __init__(self):
    self._now_year=int(datetime.datetime.now().year)

  def _position(self, position):
    original_professions = ['кладов', 'инд', 'зам', 'спец', 'промы', 'шеф', 'логопед',
                        'курьер', 'инж', 'менедж', 'мастер', 'сиделка', 'учит', 'няня',
                        'рук', 'механик', 'гене', 'стано', 'машини', 'адм', 'токарь',
                        'админ', 'инженер', 'сторож', 'ип', 'дирек', 'кассир', 'техник',
                        'опера', 'аген', 'мене', 'руко', 'акт', 'доцент', 'управ', 'ген',
                        'снабже', 'пред', 'пен', 'логист', 'бриг', 'бухг', 'прод',
                        'релтор', 'дир', 'водит', 'менедже', 'hr', 'секре', 'прода',
                        'инди', 'терми', 'агент', 'менед', 'врач', 'промышл', 'препо',
                        'руково', 'электро', 'дире', 'мерч', 'шве', 'адвокат', 'сле',
                        'гальва', 'руков', 'то', 'коуч', 'генера', 'бух',
                        'стар', 'офици', 'бари', 'дизай', 'препод', 'рабочий', 'учи',
                        'худ', 'специ', 'дояр', 'слесарь', 'мед', 'завуч', 'риелтор',
                        'заме', 'офи', 'вос', 'бармен', 'ведущий', 'самелье', 'геолог',
                        'опекун', 'воспи', 'монтер', 'управл', 'риэлтор', 'воспит',
                        'телеф', 'марке', 'админи', 'маляр', 'смм', 'санитар', 'админис',
                        'продав', 'маст', 'офиц', 'генер', 'клад', 'помо', 'грузчик',
                        'косм', 'сварщик', 'столяр', 'предпри', 'штурман', 'маркето',
                        'пре', 'таксис', 'вра', 'слесар', 'механ', 'отдела', 'бухга',
                        'клинер', 'индив', 'охран', 'охра', 'швея', 'аппа', 'ген дир',
                        'медиц', 'бариста', 'учите', 'препода', 'подолог', 'полице',
                        'прора', 'кла', 'флорист', 'инс', 'эксперт', 'моряк', 'меха',
                        'официа', 'сметчик', 'убор', 'инже', 'фарм', 'прог', 'хор', 'пари',
                        'элек', 'касс', 'сва', 'бар', 'мар', 'смотр', 'сыровар', 'провод',
                        'маши', 'индиви', 'адми', 'пекарь', 'мен', 'охр', 'инжене',
                        'предста', 'пова', 'фриланс', 'сто', 'риэ', 'нала', 'медбрат',
                        'прораб', 'намотч', 'диспет', 'тех', 'полицей', 'операто', 'фото',
                        'учас', 'рядовой', 'директо', 'монт', 'педагог', 'вед', 'специа',
                        'эксп', 'груз', 'ветери', 'режисс', 'воспита', 'сот', 'управля',
                        'уборщик', 'км', 'начальник п', 'сотрудник охраны', 'мастер ма',
                        'главный бух', 'заместитель ру', 'педагог до', 'уборщик(ца)',
                        'мед сестра', 'старший спе', 'производитель работ/ прораб',
                        'младший сотр', 'медицинская сестра', 'администрато', 'ген директор',
                        'соесарь 4 разряда', 'руководство', 'контралер отк', 'помошник директора',
                        'разнораб', 'специалист по р', 'specialist', 'отдел', 'главный спе', 'учитель-логопед.',
                        'ведущий бу', 'управляющий делами', 'старший инс', 'специалист по',
                        'заместитель главного бухгалтера', 'эл.слесарь по ремонту и обслуживанию распределительных устройств']

    updated_professions = ['кладовщик', 'индивидуальный предприниматель', 'заместитель', 'специалист', 'промышленность', 'шеф', 'логопед',
                        'курьер', 'инженер', 'менеджер', 'мастер', 'сиделка', 'учитель', 'няня',
                        'руководитель', 'механик', 'генеральный директор', 'станочник', 'машинист', 'администратор', 'токарь',
                        'администратор', 'инженер', 'сторож', 'индивидуальный предприниматель', 'директор', 'кассир', 'техник',
                        'оператор', 'агент', 'менеджмент', 'руководитель', 'актёр', 'доцент', 'управляющий', 'генеральный директор',
                        'снабжение', 'индивидуальный предприниматель', 'пенсионер', 'логист', 'бригадир', 'бухгалтер', 'продавец',
                        'риелтор', 'директор', 'водитель', 'менеджмент', 'hr', 'секретарь', 'продавец',
                        'индивидуальный предприниматель', 'термист', 'агент', 'менеджер', 'врач', 'промышленность', 'преподаватель',
                        'руководство', 'электротехник', 'директор', 'мерчандайзер', 'швея', 'адвокат', 'слесарь',
                        'гальваник', 'руководитель', 'торговый', 'консультант', 'генеральный директор', 'бухгалтер',
                        'старший', 'официант', 'бариста', 'дизайнер', 'преподаватель', 'рабочий', 'учитель',
                        'художник', 'специалист', 'дояр', 'слесарь', 'медик', 'завуч', 'риелтор',
                        'заместитель', 'официант', 'воспитатель', 'бармен', 'ведущий', 'сомелье', 'геолог',
                        'опекун', 'воспитатель', 'монтер', 'управляющий', 'риелтор', 'воспитатель',
                        'телефонист', 'маркетолог', 'администратор', 'маляр', 'социальные медиа', 'санитар', 'администратор',
                        'продавец', 'мастер', 'офицер', 'генеральный директор', 'кладовщик', 'помощник', 'грузчик',
                        'косметолог', 'сварщик', 'столяр', 'предприятие', 'штурман', 'маркетолог',
                        'индивидуальный предприниматель', 'таксист', 'врач', 'слесарь', 'механик', 'продавец', 'бухгалтерия',
                        'уборщик', 'индивидуальный предприниматель', 'охранник', 'охранник', 'швея', 'аппаратчик', 'генеральный директор',
                        'медик', 'бариста', 'учитель', 'преподаватель', 'подолог', 'полицейский',
                        'прораб', 'кладовщик', 'флорист', 'инструктор', 'эксперт', 'моряк', 'механик',
                        'официант', 'сметчик', 'уборщик', 'инженер', 'фармацевт', 'программист', 'хореограф', 'парикмахер',
                        'электрик', 'кассир', 'сварщик', 'бармен', 'маркетолог', 'смотритель', 'сыровар', 'проводник',
                        'машинист', 'индивидуальный предприниматель', 'администратор', 'пекарь', 'менеджер', 'охранник',
                        'инженер', 'представитель', 'повар', 'фриланс', 'столяр', 'риелтор', 'наладчик',
                        'медбрат', 'прораб', 'намотчик', 'диспетчер', 'техник', 'полицейский', 'оператор', 'фотограф',
                        'участковый', 'рядовой', 'директор', 'монтажник', 'педагог', 'ведущий', 'специалист',
                        'эксперт', 'грузчик', 'ветеринар', 'режиссер', 'воспитатель', 'сотрудник', 'управляющий',
                        'уборщик', 'км', 'начальник', 'охранник', 'мастер маникюра', 'главный бухгалтер', 'заместитель',
                       'педагог', 'уборщик', 'медсестра', 'старший специалист', 'прораб', 'младший сотрудник',
                       'медсестра', 'администратор', 'генеральный директор', 'слесарь', 'руководитель', 'контролер отк',
                       'помощник директора', 'разноработчий', 'специалист', 'специалист', 'продавец', 'главный специалист',
                       'логопед', 'главный бухгалтер', 'управляющий', 'инструктор', 'специалист', 'главный бухгалтер',
                       'слесарь']

    position = position.lower().strip()
    profession_mapping = dict(zip(original_professions, updated_professions))
    if position in list(profession_mapping.keys()):
      return profession_mapping[position]
    return position

  def _gender(self, gender):
    if gender == 'Муж.':
      gender = 0
    else:
      gender = 1
    return gender

  def _bank_merch_trust(self, merch_code):
    bankA = {0.9: [2, 3, 10, 13, 15, 16, 18, 21, 22, 23,
                   34, 40, 47, 49, 62, 63, 64, 66, 68, 78],
             0.6: [1, 4, 5, 6, 7, 8, 9, 11, 12, 14, 17, 25, 27,
                   28, 30, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43,
                   44, 48, 65, 67, 69, 70, 71, 72, 73, 74, 75, 77, 80],
             0.2: [19, 20, 24, 26, 29, 31, 45, 46, 50, 61, 76, 79]}

    bankB = {0.9: [15, 19, 20, 23, 30, 37, 41, 43, 44, 50,
                   62, 68, 72, 74, 78, 80],
             0.6: [1, 2, 3, 7, 10, 11, 12, 14, 16, 17, 18, 21, 22,
                   24, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40,
                   45, 49, 61, 63, 65, 66, 67, 70, 76, 79],
             0.2: [4, 5, 6, 8, 9, 13, 25, 26, 31, 42, 46, 47, 48,
                   64, 69, 71, 73, 75, 77]}

    bankC = {0.9: [1, 5, 15, 16, 20, 24, 27, 28, 34, 37,
                   38, 42, 44, 65, 70, 79],
             0.6: [3, 4, 6, 10, 12, 14, 17, 19, 21, 22, 23,
                   25, 26, 29, 30, 31, 32, 33, 35, 36, 40, 45,
                   46, 47, 48, 50, 61, 62, 63, 64, 66, 68, 71,
                   73, 74, 76, 77, 78, 80],
             0.2: [2, 7, 8, 9, 11, 13, 18, 39, 41, 43, 49, 67, 69, 72, 75]}

    bankD = {0.9: [1, 3, 5, 6, 9, 13, 15, 20, 22, 24, 28, 33, 34,
                   38, 47, 48, 50, 63, 72, 75, 76, 77],
             0.6: [2, 8, 10, 16, 18, 19, 23, 27, 29, 30, 31, 32,
                   36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 61, 62,
                   65, 66, 67, 68, 69, 70, 73, 78, 79, 80],
             0.2: [4, 7, 11, 12, 14, 17, 21, 25, 26, 35, 42, 64, 71, 74]}

    bankE = {0.9: [3, 10, 11, 20, 23, 24, 29, 30, 42,
                   43, 44, 45, 48, 63, 71, 74, 77],
             0.6: [1, 2, 6, 7, 8, 9, 13, 15, 17, 18, 19,
                   21, 22, 25, 26, 28, 32, 33, 34, 36, 37,
                   40, 41, 46, 47, 49, 50, 61, 62, 64, 67,
                   68, 70, 72, 73, 76, 79, 80],
             0.2: [4, 5, 12, 14, 16, 27, 31, 35, 38, 39, 65, 66, 69, 75, 78]}

    banks = [bankA, bankB, bankC, bankD, bankE]
    bank_merch_trust = []
    for bank in banks:
      for key, lst in bank.items():
        if merch_code in lst:
          bank_merch_trust.append(key)
          continue
    return bank_merch_trust

  def _age(self, birth_date):
    age = self._now_year - int(datetime.date.fromisoformat(str(birth_date)).year)
    return age

  def _work_age(self, job_start_date):
    work_age = self._now_year - int(datetime.date.fromisoformat(str(job_start_date)).year)
    if work_age > 10:
      work_age = 10
    elif work_age < 0:
      work_age = 0
    return work_age

  def _value_verification(self, value, work_age):
    vals = {'0': 0,
            'менее 4 месяцев': 0,
            '4 - 6 месяцев': 0,
            '6 месяцев - 1 год': 0,
            '1 - 2 года': 1,
            '2 - 3 года': 2,
            '3 - 4 года': 3,
            '4 - 5 лет': 4,
            '5 - 6 лет': 5,
            '6 - 7 лет': 6,
            '7 - 8 лет': 7,
            '8 - 9 лет': 8,
            '9 - 10 лет': 9,
            '10 и более лет': 10
           }
    value = vals[value]
    if value != work_age:
      return 0
    else:
      return 1

  def _pdn(self, month_profit, month_expense, loan_term, loan_amount):
    pdn = ((((loan_amount / loan_term) + month_expense)) / month_profit*100)
    if (pdn > 40) | (pdn < 0):
      return 1
    else:
      return 0

  def _month_loan(self, loan_term, loan_amount):
    return loan_amount / loan_term

  def _family_status(self, family_status):
    stats =[]
    status = ['Вдовец / вдова', 'Гражданский брак / совместное проживание',
              'Женат / замужем', 'Никогда в браке не состоял(а)',
              'Разведён / Разведена']
    for i in status:
      if family_status == i:
        stats.append(1)
      else:
        stats.append(0)
    return stats

  def _good_position(self, position):
    good_bad_pos = {0: ['сиделка няня дом клинер', 'парикмахер', 'разнораб',
                        'электро', 'помощник', 'генеральный', 'диспетчер',
                        'инспектор', 'сварщик', 'уборщи', 'библиотекарь',
                        'ведущий ведущая', 'грузчик', 'фотограф', 'ассистент'],
                    1: ['hr рекрутер', 'заведующий заведующая', 'программист',
                        'мастер', 'авто', 'официант', 'руковод', 'старший',
                        'экономист', 'механик', 'сборщик', 'сотрудник',
                        'командир', 'токарь', 'другие', 'бухгалтер',
                        'монтажник', 'рабочий / работник', 'начальник',
                        'лаборант', 'секретарь', 'фармацевт аптек', 'менеджер',
                        'финансовый', 'специалист', 'инженер', 'оператор',
                        'учитель педагог воспитатель завуч преподаватель',
                        'заместитель', 'дизайнер', 'администратор', 'директор',
                        'полиц пожар следоват рядов', 'само / фрилансер',
                        'врач ветеринар хирург фельдшер санитар косметолог мед',
                        'маркетолог мерчендайзер', 'машинист', 'технолог',
                        'владелец / индивидуальный / ип / предприниматель собственник',
                        'слесарь', 'юри', 'управляющий / управляющая',
                        'водитель', 'продавец / кассир / консультант',
                        'повар', 'охранник'],
                   }
    for key, lst in good_bad_pos.items():
      for pos in lst:
        if position in pos:
          return key
    return 0

  def _scaling(self, df):
    scaler = pickle.load(open('models/scaler.sav', 'rb'))
    df = scaler.transform(df)
    return df

  def preprocessing(self, values):
        position = self._position(values[0])
        gender = self._gender(values[1])
        merch_trust = self._bank_merch_trust(values[11])
        age = self._age(values[5])
        work_age = self._work_age(values[6])
        value_verification = self._value_verification(values[7], work_age)
        pdn = self._pdn(values[2], values[3], values[9], values[10])
        family_status = self._family_status(values[8])
        month_loan = self._month_loan(values[9], values[10])
        good_position = self._good_position(position)
        data_dict = {
                'MonthProfit': [values[2]],
                'Gender': [gender],
                'SNILS': [values[4]],
                'BankA_Merch_Trust': [merch_trust[0]],
                'BankB_Merch_Trust': [merch_trust[1]],
                'BankC_Merch_Trust': [merch_trust[2]],
                'BankD_Merch_Trust': [merch_trust[3]],
                'BankE_Merch_Trust': [merch_trust[4]],
                'Work_age': [work_age],
                'Age': [age],
                'Value_verification': [value_verification],
                'PDN_new': [pdn],
                'Вдовец / вдова': [family_status[0]],
                'Гражданский брак / совместное проживание': [family_status[1]],
                'Женат / замужем': [family_status[2]],
                'Никогда в браке не состоял(а)': [family_status[3]],
                'Разведён / Разведена': [family_status[4]],
                'MonthLoan': [month_loan],
                'Good_Position': [good_position]
            }
        df = pd.DataFrame(data_dict)
        df = self._scaling(df)
        return df